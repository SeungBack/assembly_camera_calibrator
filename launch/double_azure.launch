
<launch>
  <arg name="camera1" value="azure1"/>
  <arg name="camera2" value="azure2"/>

  <!-- arguments for camera input -->
  <arg name="dictionary" value="12"/>
  <arg name="fiducial_len" value="0.106" />
  <arg name="image" default="image_raw"/>
  <arg name="transport" default="compressed"/>
  <arg name="do_pose_estimation" default="true"/>
  <arg name="ignore_fiducials" default="" />
  <arg name="fiducial_len_override" default="" />
  
  <!-- ar guments for slam -->
  <arg name="publish_tf" default="true"/>
  <arg name="tf_publish_interval" default="0.2"/>
  <arg name="future_date_transforms" default="0.0"/>
  <arg name="publish_6dof_pose" default="true"/>
  <arg name="systematic_error" default="0.01"/>
  <arg name="covariance_diagonal" default="[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"/> -->

  <!-- Start the aruco_node for camera 1-->

  <node pkg="aruco_detect" name="aruco_detect" ns="$(arg camera1)"
    type="aruco_detect" output="screen" respawn="false">
    <param name="image_transport" value="$(arg transport)"/>
    <param name="publish_images" value="true" />
    <param name="fiducial_len" value="$(arg fiducial_len)"/>
    <param name="dictionary" value="$(arg dictionary)"/>
    <param name="do_pose_estimation" value="$(arg do_pose_estimation)"/>
    <param name="ignore_fiducials" value="$(arg ignore_fiducials)"/>
    <param name="fiducial_len_override" value="$(arg fiducial_len_override)"/>
    <remap from="tf_prefix" to="$(arg camera1)"/>
    <remap from="/camera/compressed" to="/$(arg camera1)/rgb/$(arg image)/$(arg transport)"/>
    <remap from="/camera_info" to="/$(arg camera1)/rgb/camera_info"/>
    <remap from="/fiducial_images" to="/$(arg camera1)/fiducial_images"/>
    <remap from="/fiducial_transforms" to="/$(arg camera1)/fiducial_transforms"/>
    <remap from="/fiducial_vertices" to="/$(arg camera1)/fiducial_vertices"/>
  </node>

  <!-- Start the aruco node for camera 2 -->
  <node pkg="aruco_detect" name="aruco_detect" ns="$(arg camera2)"
    type="aruco_detect" output="screen" respawn="false">
    <param name="image_transport" value="$(arg transport)"/>
    <param name="publish_images" value="true" />
    <param name="fiducial_len" value="$(arg fiducial_len)"/>
    <param name="dictionary" value="$(arg dictionary)"/>
    <param name="do_pose_estimation" value="$(arg do_pose_estimation)"/>
    <param name="ignore_fiducials" value="$(arg ignore_fiducials)"/>
    <param name="fiducial_len_override" value="$(arg fiducial_len_override)"/>
    <remap from="tf_prefix" to="$(arg camera2)"/>
    <remap from="/camera/compressed" to="/$(arg camera2)/rgb/$(arg image)/$(arg transport)"/>
    <remap from="/camera_info" to="/$(arg camera2)/rgb/camera_info"/>
    <remap from="/fiducial_images" to="/$(arg camera2)/fiducial_images"/>
    <remap from="/fiducial_transforms" to="/$(arg camera2)/fiducial_transforms"/>
    <remap from="/fiducial_vertices" to="/$(arg camera2)/fiducial_vertices"/>
  </node>

  <!-- Start camera broadcaster for camera 1-->
  <node name="$(arg camera1)_broadcaster" pkg="assembly_camera_manager" type="camera_broadcaster.py" respawn="false" output="screen" >
      <param name="camera" type="string" value="$(arg camera1)" />
  </node>

  <!-- Start camera broadcaster for camera 2-->
  <node name="$(arg camera2)_broadcaster" pkg="assembly_camera_manager" type="camera_broadcaster.py" respawn="false" output="screen" >
      <param name="camera" type="string" value="$(arg camera2)" />
  </node>

  <!-- merge two separate tf tree of camera 1 and 2  -->
  <node name="merge_map" pkg="assembly_camera_manager" type="merge_map.py" respawn="false" output="screen" >
      <param name="camera1" type="string" value="$(arg camera1)" />
      <param name="camera2" type="string" value="$(arg camera2)" />
  </node>

  <!-- define camera2_map as a map  -->
  <node pkg="tf" type="static_transform_publisher" 
        name="map_broadcaster" args="0 0 0 0 0 0 $(arg camera2)_map map 100" />

</launch>